{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"OAuth2Service": {
				"enum": [
					"GITHUB",
					"GOOGLE",
					"GITLAB"
				],
				"type": "string"
			},
			"OAuth2Session": {
				"description": "The OAuth2 session",
				"properties": {
					"code": {
						"type": "string",
						"description": "The session logon code, see https://docs.github.com/en/developers/apps/authorizing-oauth-apps & https://developers.google.com/identity/protocols/oauth2/web-server"
					},
					"redirectUri": {
						"type": "string"
					},
					"oauth2Service": {
						"$ref": "#/components/schemas/OAuth2Service"
					}
				},
				"required": [
					"code",
					"redirectUri",
					"oauth2Service"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "string",
						"description": "User unique id"
					},
					"uniqueOAuthId": {
						"type": "string",
						"description": "The user logon provider unique id\r\nTODO: add index"
					},
					"email": {
						"type": "string",
						"description": "The user unique email (can be )\r\nTODO: add index"
					},
					"displayName": {
						"type": "string",
						"description": "The user display name"
					},
					"avatarBase64": {
						"type": "string",
						"description": "The user avatar as Base64 string"
					},
					"openNotes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The open notes (user workspace) collection"
					}
				},
				"required": [
					"id",
					"uniqueOAuthId",
					"openNotes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NoteStatus": {
				"description": "Note status",
				"enum": [
					"WORKSPACE",
					"BACKLOG"
				],
				"type": "string"
			},
			"Note": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Note unique id"
					},
					"userId": {
						"type": "string",
						"description": "The note owner"
					},
					"name": {
						"type": "string",
						"description": "The note name (optional)"
					},
					"creationTime": {
						"type": "number",
						"format": "double",
						"description": "The note creation UTC time"
					},
					"lastModifiedTime": {
						"type": "number",
						"format": "double",
						"description": "The note last update UTC time"
					},
					"contentText": {
						"type": "string",
						"description": "The note content as plain-text"
					},
					"contentHTML": {
						"type": "string",
						"description": "The note content as HTML"
					}
				},
				"required": [
					"id",
					"userId",
					"creationTime",
					"lastModifiedTime",
					"contentText",
					"contentHTML"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NotesPage": {
				"properties": {
					"notes": {
						"items": {
							"$ref": "#/components/schemas/Note"
						},
						"type": "array",
						"description": "Page notes"
					},
					"totalCount": {
						"type": "number",
						"format": "double",
						"description": "Total *available* notes"
					}
				},
				"required": [
					"notes",
					"totalCount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MatchOperators": {
				"type": "string",
				"enum": [
					"startWith",
					"contains",
					"notContains",
					"endWith",
					"equals",
					"notEquals"
				]
			},
			"RelationOperators": {
				"type": "string",
				"enum": [
					"equals",
					"notEquals",
					"less",
					"lessOrEquals",
					"greater",
					"greaterOrEquals"
				]
			},
			"CollectionOperators": {
				"type": "string",
				"enum": [
					"inCollection",
					"notInCollection"
				]
			},
			"FilterOptions": {
				"properties": {
					"match": {
						"properties": {
							"matchOperator": {
								"$ref": "#/components/schemas/MatchOperators"
							},
							"value": {
								"type": "string"
							}
						},
						"required": [
							"matchOperator",
							"value"
						],
						"type": "object"
					},
					"range": {
						"properties": {
							"to": {
								"type": "number",
								"format": "double"
							},
							"from": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"to",
							"from"
						],
						"type": "object"
					},
					"relation": {
						"properties": {
							"relationOperator": {
								"$ref": "#/components/schemas/RelationOperators"
							},
							"value": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"relationOperator",
							"value"
						],
						"type": "object"
					},
					"collection": {
						"properties": {
							"collectionOperator": {
								"$ref": "#/components/schemas/CollectionOperators"
							},
							"values": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"type": "number",
											"format": "double"
										}
									]
								},
								"type": "array"
							}
						},
						"required": [
							"collectionOperator",
							"values"
						],
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PageRequest": {
				"properties": {
					"orderBy": {
						"properties": {
							"name": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"creationTime": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"lastModifiedTime": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"contentText": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							}
						},
						"type": "object",
						"description": "Order by note fields"
					},
					"fromIndex": {
						"type": "number",
						"format": "double"
					},
					"pageSize": {
						"type": "number",
						"format": "double"
					},
					"filter": {
						"properties": {
							"name": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"creationTime": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"lastModifiedTime": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"contentText": {
								"$ref": "#/components/schemas/FilterOptions"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"fromIndex",
					"pageSize"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "apiKey",
				"name": "authentication",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "coffee-paste-backend",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Haim Kastner"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/auth/oauth2": {
			"post": {
				"operationId": "AuthByOAuth",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Login to service *after* getting the authorization service OAuth2 code.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The OAuth logon session",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OAuth2Session"
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"operationId": "Logout",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/profile": {
			"get": {
				"operationId": "GetUserProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users": {
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes": {
			"post": {
				"operationId": "CreateNote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create new note in the workspace",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/status/{noteId}": {
			"put": {
				"operationId": "SetNotes",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Move note from/to workspace/archive",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"status": {
										"$ref": "#/components/schemas/NoteStatus"
									}
								},
								"required": [
									"status"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/content/{noteId}": {
			"put": {
				"operationId": "SetNotesContent",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Set note content, (you can use also the WS channel API for that)",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"contentHTML": {
										"type": "string"
									},
									"contentText": {
										"type": "string"
									}
								},
								"required": [
									"contentHTML",
									"contentText"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/name/{noteId}": {
			"put": {
				"operationId": "SetNotesName",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Set note name",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"required": [
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/{noteId}": {
			"delete": {
				"operationId": "DeleteNotes",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Permanently delete note",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetNote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Note"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/notes/workspace": {
			"get": {
				"operationId": "GetOpenNotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/channel-session": {
			"get": {
				"operationId": "GetChannelKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Generating channel session in order to allow open web-socket channel.\r\nThe key should append to the WS URL as channelSession param, the channel key is valid for 1 minute only.\r\nNote to keep this session and send it in the REST request channelSid so the current channel will not send update about request sent from this client.",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/backlog": {
			"get": {
				"operationId": "GetBacklogNotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/backlog/page": {
			"post": {
				"operationId": "GetBacklogNotesPage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotesPage"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PageRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}