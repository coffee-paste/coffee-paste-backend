{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"OAuth2Service": {
				"enum": [
					"GITHUB",
					"GOOGLE",
					"GITLAB"
				],
				"type": "string"
			},
			"OAuth2Session": {
				"description": "The OAuth2 session",
				"properties": {
					"code": {
						"type": "string",
						"description": "The session logon code, see https://docs.github.com/en/developers/apps/authorizing-oauth-apps & https://developers.google.com/identity/protocols/oauth2/web-server"
					},
					"redirectUri": {
						"type": "string"
					},
					"oauth2Service": {
						"$ref": "#/components/schemas/OAuth2Service"
					}
				},
				"required": [
					"code",
					"redirectUri",
					"oauth2Service"
				],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"id": {
						"type": "string",
						"description": "User unique id"
					},
					"uniqueOAuthId": {
						"type": "string",
						"description": "The user logon provider unique id\r\nTODO: add index"
					},
					"email": {
						"type": "string",
						"description": "The user unique email (can be )\r\nTODO: add index"
					},
					"displayName": {
						"type": "string",
						"description": "The user display name"
					},
					"avatarBase64": {
						"type": "string",
						"description": "The user avatar as Base64 string"
					},
					"openNotes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The open notes (user workspace) collection"
					},
					"localStorageSalt": {
						"type": "string",
						"description": "The local storage salt encryption key.\r\nThis is *NOT* a user password, it's only used to help encrypt the user notes key stored in the local storage \r\nso only one that have access to the API will be able to read the local storage.\r\nThe real encryption key will never ever will be sent to the server."
					},
					"passwordVersionCodeName": {
						"type": "string",
						"description": "An numen readable code for password version, used to detect the encryption version of each note in case of key change"
					},
					"certificateVersionCodeName": {
						"type": "string",
						"description": "An numen readable code for certificate version, used to detect the encryption version of each note in case of certificate change"
					}
				},
				"required": [
					"id",
					"uniqueOAuthId",
					"openNotes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NoteStatus": {
				"description": "Note status",
				"enum": [
					"WORKSPACE",
					"BACKLOG"
				],
				"type": "string"
			},
			"Encryption": {
				"enum": [
					"NONE",
					"PASSWORD",
					"CERTIFICATE"
				],
				"type": "string"
			},
			"Note": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Note unique id"
					},
					"userId": {
						"type": "string",
						"description": "The note owner"
					},
					"name": {
						"type": "string",
						"description": "The note name (optional)"
					},
					"creationTime": {
						"type": "number",
						"format": "double",
						"description": "The note creation UTC time"
					},
					"lastModifiedTime": {
						"type": "number",
						"format": "double",
						"description": "The note last update UTC time"
					},
					"contentText": {
						"type": "string",
						"description": "The note content as plain-text"
					},
					"contentHTML": {
						"type": "string",
						"description": "The note content as HTML"
					},
					"encryption": {
						"$ref": "#/components/schemas/Encryption",
						"description": "The note encryption method (as default none)"
					},
					"passwordVersionCodeName": {
						"type": "string",
						"description": "The note password encryption version code-name"
					},
					"certificateVersionCodeName": {
						"type": "string",
						"description": "The note password encryption version code-name"
					},
					"randomNoteSalt": {
						"type": "string",
						"description": "This (unique read-only) random key used to salt the note encryption (if required)\r\nSo the password/certificate alone will not be en enough to decrypted note content."
					}
				},
				"required": [
					"id",
					"userId",
					"creationTime",
					"lastModifiedTime",
					"contentText",
					"contentHTML",
					"encryption",
					"randomNoteSalt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NotesPage": {
				"properties": {
					"notes": {
						"items": {
							"$ref": "#/components/schemas/Note"
						},
						"type": "array",
						"description": "Page notes"
					},
					"totalCount": {
						"type": "number",
						"format": "double",
						"description": "Total *available* notes"
					}
				},
				"required": [
					"notes",
					"totalCount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MatchOperators": {
				"type": "string",
				"enum": [
					"startWith",
					"contains",
					"notContains",
					"endWith",
					"equals",
					"notEquals"
				]
			},
			"RelationOperators": {
				"type": "string",
				"enum": [
					"equals",
					"notEquals",
					"less",
					"lessOrEquals",
					"greater",
					"greaterOrEquals"
				]
			},
			"CollectionOperators": {
				"type": "string",
				"enum": [
					"inCollection",
					"notInCollection"
				]
			},
			"FilterOptions": {
				"properties": {
					"match": {
						"properties": {
							"matchOperator": {
								"$ref": "#/components/schemas/MatchOperators"
							},
							"value": {
								"type": "string"
							}
						},
						"required": [
							"matchOperator",
							"value"
						],
						"type": "object"
					},
					"range": {
						"properties": {
							"to": {
								"type": "number",
								"format": "double"
							},
							"from": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"to",
							"from"
						],
						"type": "object"
					},
					"relation": {
						"properties": {
							"relationOperator": {
								"$ref": "#/components/schemas/RelationOperators"
							},
							"value": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"relationOperator",
							"value"
						],
						"type": "object"
					},
					"collection": {
						"properties": {
							"collectionOperator": {
								"$ref": "#/components/schemas/CollectionOperators"
							},
							"values": {
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"type": "number",
											"format": "double"
										}
									]
								},
								"type": "array"
							}
						},
						"required": [
							"collectionOperator",
							"values"
						],
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PageRequest": {
				"properties": {
					"orderBy": {
						"properties": {
							"name": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"creationTime": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"lastModifiedTime": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							},
							"contentText": {
								"type": "string",
								"enum": [
									"ASC",
									"DESC"
								]
							}
						},
						"type": "object",
						"description": "Order by note fields"
					},
					"fromIndex": {
						"type": "number",
						"format": "double"
					},
					"pageSize": {
						"type": "number",
						"format": "double"
					},
					"filter": {
						"properties": {
							"name": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"creationTime": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"lastModifiedTime": {
								"$ref": "#/components/schemas/FilterOptions"
							},
							"contentText": {
								"$ref": "#/components/schemas/FilterOptions"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"fromIndex",
					"pageSize"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FetchPageOptions": {
				"type": "string",
				"enum": [
					"all",
					"backlog",
					"workspace"
				]
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "apiKey",
				"name": "authentication",
				"in": "header"
			},
			"api_key": {
				"type": "apiKey",
				"name": "api_key",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "coffee-paste-backend",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Haim Kastner"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/auth/oauth2": {
			"post": {
				"operationId": "AuthByOAuth",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Login to service *after* getting the authorization service OAuth2 code.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The OAuth logon session",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OAuth2Session"
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"operationId": "Logout",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/profile": {
			"get": {
				"operationId": "GetUserProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/local-storage-salt": {
			"get": {
				"operationId": "GetUserLocalStorageSalt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "The local storage salt encryption key.\r\nThis is *NOT* a password, it's only used to salt encrypt the user notes key stored in the local storage \r\nso only who that have access to the API will be able to read the local storage.\r\nThe real encryption key will never ever will be sent to the server.",
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/local-storage-salt/regenerate": {
			"post": {
				"operationId": "RegenerateUserLocalStorageSalt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Regenerate the user local storage salt encryption key, the actual meaning is that the user will have to re-type his password again in the browsers.",
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/new-password-version-codename": {
			"post": {
				"operationId": "IncreaseUserPasswordVersionCodeName",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Increase the password-version-codename.\r\nCall it when you decided to change your local password, and you want to mark all note that encrypted with the old password that their encryption is by the old version of the password",
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/new-certificate-version-codename": {
			"post": {
				"operationId": "IncreaseUseCertificateVersionCodeName",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Increase the certificate-version-codename.\r\nCall it when you decided to change your local certificate, and you want to mark all note that encrypted with the old certificate that their encryption is by the old version of the certificate",
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/users": {
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			},
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"api_key": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/users/{userId}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"api_key": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUserByAdmin",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"api_key": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/notes": {
			"post": {
				"operationId": "CreateNote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Create new note in the workspace",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/status/{noteId}": {
			"put": {
				"operationId": "SetNoteStatus",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Move note from/to workspace/archive",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"status": {
										"$ref": "#/components/schemas/NoteStatus"
									}
								},
								"required": [
									"status"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/content/{noteId}": {
			"put": {
				"operationId": "SetNoteContent",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Set note content, (you can use also the WS channel API for that)",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"contentHTML": {
										"type": "string"
									},
									"contentText": {
										"type": "string"
									}
								},
								"required": [
									"contentHTML",
									"contentText"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/name/{noteId}": {
			"put": {
				"operationId": "SetNoteName",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Set note name",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"required": [
									"name"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/encryption/{noteId}": {
			"put": {
				"operationId": "SetNoteEncryptionMethod",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Set note encryption method (including the new encrypted content, to override current content)",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"encryption": {
										"$ref": "#/components/schemas/Encryption"
									},
									"contentText": {
										"type": "string"
									},
									"contentHTML": {
										"type": "string"
									}
								},
								"required": [
									"encryption",
									"contentText",
									"contentHTML"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/notes/{noteId}": {
			"delete": {
				"operationId": "DeleteNotes",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Permanently delete note",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The front session channel, used to skip this channel while updating succeed action via WS",
						"in": "header",
						"name": "channelSid",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetNote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Note"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "noteId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/notes/workspace": {
			"get": {
				"operationId": "GetOpenNotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/channel-session": {
			"get": {
				"operationId": "GetChannelKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Generating channel session in order to allow open web-socket channel.\r\nThe key should append to the WS URL as channelSession param, the channel key is valid for 1 minute only.\r\nNote to keep this session and send it in the REST request channelSid so the current channel will not send update about request sent from this client.",
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/backlog": {
			"get": {
				"operationId": "GetBacklogNotes",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": []
			}
		},
		"/notes/page": {
			"post": {
				"operationId": "GetNotesPage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotesPage"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"jwt": [
							"user"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "fetchPageNotes",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/FetchPageOptions"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PageRequest"
							}
						}
					}
				}
			}
		},
		"/notes/workspace/{userId}": {
			"get": {
				"operationId": "GetOpenNotesByUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"api_key": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/notes/backlog/{userId}": {
			"get": {
				"operationId": "GetBacklogNotesByUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Note"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Notes"
				],
				"security": [
					{
						"api_key": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}